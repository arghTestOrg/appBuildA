name: Build and Deploy App to EKS

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
  
on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

  # Install aws cli
    - name: Install AWS CLI
      run: |
           sudo apt-get update
           sudo apt-get install awscli -y
           aws --version
     
  # Install kubectl
    - name: Install kubectl
      run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

  # Configure AWS Credentials using OIDC  
    - name: Configure AWS Credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4  
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ASSUMED }}
        aws-region: ${{ secrets.AWS_REGION }}

  # Get Org Secrets for Cluster
    - name: Retrieve EKS Cluster Secrets
      run: |
           echo "CLUSTER_NAME=${{ secrets.CLUSTER_NAME }}" >> $GITHUB_ENV
           echo "CLUSTER_ENDPOINT=${{ secrets.CLUSTER_ENDPOINT }}" >> $GITHUB_ENV
           echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
    
  # Get aws caller identity
  #  - name: Get caller identity
  #    run: aws sts get-caller-identity

  # Just Describe cluster
  #  - name: Just Describe Cluster 
  #    run: aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

  # get cluster ca data      
    - name: Get Cert Data
      run: aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query 'cluster.certificateAuthority.data' --output text | base64 --decode > ca.crt
           
  # update kubeconfig data  
    - name: Update kubeconfig for EKS with CA data
      run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
  #   run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --endpoint-url ${{ env.CLUSTER_ENDPOINT }}  --ca-bundle ./ca.crt
          
  # Deploy the serviceAccount to EKS using kubectl - do this early to give time to cluster
    - name: SA Deployment
      run:  kubectl apply -f k8s/serviceaccount.yaml
  
  # Setup Java
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
         distribution: 'temurin'
         java-version: '21'
    
  # Maven build
    - name: Build with Maven
      run: mvn clean package

  # Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

  # Build Docker image with the tag in lowercase
    - name: Build Docker image
      run: docker build -t ghcr.io/arghtestorg/crud:latest .

  # Push Docker image to GitHub Container Registry
    - name: Push Docker image
      run: docker push ghcr.io/arghtestorg/crud:latest
  
  # Logout of docker
    - name: Logout of GHCR
      run: docker logout ghcr.io

  # Deploy the application to EKS using kubectl
    - name: App Deployment
      run:  kubectl apply -f k8s/deployment.yaml 
      
  # Deploy the LoadBalancer
    - name: LB Deployment
      run:  kubectl apply -f k8s/service.yaml